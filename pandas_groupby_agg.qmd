# Imports

```{python}
import pandas as pd
import numpy as np
```

## Data

```{python}
yao = pd.read_csv("intro_to_quarto\data\yaounde_mini.csv")
yao
```

## Introduce agg

```{python}
## classical method of extracting the mean
yao["age"].mean()

```

```{python}
## agg method
yao.agg(mean_age=("age", "mean")) # tuple
# summary of syntax: df.agg(summary_name=("column to smmarize", "summary function"))
```


```{python}
# computing multiple statistics at once
yao_summary = yao.agg(mean_age=("age", "mean"), median_age=("age", "median"))
yao_summary
```

## Practice Q: Use 'agg()' and the relevant summary functions to obtain the mean and median of respondent weights from the 'weight_kg' variable of the 'yao' data frame.


```{python}
yao_weight = yao.agg(mean_weight_kg = ("weight_kg", "mean"), median_weight_kg = ("weight_kg", "median"))
yao_weight
```

## Introducing groupby

```{python}
yao.groupby("sex")
```


```{python}
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median"))
```

```{python}
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median")).reset_index()
```


```{python}
(
yao
    .groupby("sex")
    .agg(mean_age=("age", "mean"), median_age=("age", "median"))
    .reset_index()
)
```

## calculate the max & min + number of individualsweight per neighborhood


```{python}
(
    yao.groupby("neighborhood")
    .agg(
        max_weight=("weight_kg", "max"),
        min_weight=("weight_kg", "min"),
        num_inds=("weight_kg", "size"),# 'size' will get d len of 'weight_kg' per neighborhood
    )
    .reset_index()
)
```

## Practice Q:

```{python}
(
    yao.groupby("sex")
    .agg(
        max_height=("height_cm", "max"),
        min_height=("height_cm", "min"),
        num_inds=("height_cm", "count"),# 'size' will get d len of 'weight_kg' per neighborhood
    )
    .reset_index()
)
```


```{python}

(
    yao.groupby(["sex", "neighborhood"])
    .agg(
        max_weight=("weight_kg", "max"),
        min_weight=("weight_kg", "min"),
        num_inds=("weight_kg", "size"),# 'size' will get d len of 'weight_kg' per neighborhood
    )
    .reset_index()
)
```

## Practice Q: Min and max height per age sex group. 
Use 'groupby()', and 'min()' to get the minimum and maximum heights for each age_sex group in the 'yao' data frame. The variables needed are 'age_category_3' and 'sex'.
```{python}

(
    yao.groupby(["age_category_3",
    "sex"])
    .agg(
        max_height=("height_cm", "max"),
        min_height=("height_cm", "min"),
       
    )
    .reset_index()
)
```

# Nan values in agg

```{python}
(
yao.groupby("is_smoker")
    .agg(weight_mean=("weight_kg", "mean"))
)
# note this has dropped some values
```

```{python}
(
yao.groupby("is_smoker", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"),
        count=("weight_kg", "size"))
)
```

```{python}
(
yao.groupby("is_pregnant", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"))
    .reset_index()
)
```

## Custom stats with lambda functions

```{python}
def range_func(x):
    return max(x) - min(x)

range_func([1,5,6])
```
Using a lambda

```{python}
range_func = lambda x: max(x) - min(x)
range_func ([1,5,6])
```

Calculating range of weights per neiborhood
```{python}
(
yao.groupby("neighborhood", dropna=False)
    .agg(weight_range=("weight_kg", lambda x: max(x) - min(x)))
    .reset_index()
    
)
```

```{python}
#same as above
(
    yao.groupby("neighborhood", dropna=False)
    .agg(weight_range=("weight_kg", range_func)) #note range_func
    .reset_index()
)
```

Coefficient of variation:(std/mean) * 100

```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_range=("weight_kg", lambda x: (x.std() /  x.mean()) * 100 ))
     .reset_index()
)
```

## Practice Q: IQR of age by neighborhood.
Find the interquartile range (IQR) of the age variable for each neighborhood. The IQR is the difference between 75th and 25th percentiles. Your lambda will look like this: 'lambda x: x.quantile(0.75) - x.quantile(0.25)'
```{python}
(
    yao.groupby("neighborhood")
    .agg(age_IQR=("age", lambda x: x.quantile(0.75) - x.quantile(0.25) ))
     .reset_index()
)
```