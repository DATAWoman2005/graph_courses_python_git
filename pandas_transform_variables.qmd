# Learning objectives

- Understand how to create new variables in a DataFrame.

- Learn how to modify existing variables


# Imposrt


```{python}
import pandas as pd
pd.options.mode.copy_on_write = True
```

## Dataset

```{python}
counties = pd.read_csv("intro_to_quarto/data/us_counties_data.csv")
counties
```

## creating a subset of the dataFrame

```{python}
area_df = counties[["county", "area_sq_miles", "pop_20"]]
area_df
```

# Creating New Variables 


```{python}
# New var with area in sq km - converting sq.miles to sq.km
area_df["area_sq_km"] = area_df["area_sq_miles"] * 2.59
# New var with area in hectares - 1 hectare = 100 sq.km
area_df["area_hectares"] = area_df["area_sq_km"] * 100
area_df
```

## Practice 
### Create a new column  for area in Acres


```{python}
area_df["area_acres"] = area_df["area_sq_miles"] * 640
area_df
```

## Modifying Existing Variables

```{python}
area_df["area_sq_km"] = area_df["area_sq_km"].round(1)
area_df
## for this code if you want to round the decimal places to 2 .round(2) instead of 1, you need to rerun all the codes above before it will reflect 2 decimal places.
```

## Practice Q:
round the "area_acres" variable to one decimal place. 

```{python}
area_df["area_acres"] = area_df["area_acres"].round(1)
area_df
```

# Calculating with multiple variables

```{python}
area_df["pop_per_sq_km"] = (area_df["pop_20"] / area_df["area_sq_km"]).round(1)
area_df = area_df.sort_values(by="pop_per_sq_km", ascending=False)
area_df
```

## Use the "counties" dataset to calculate the percentage of foreign-born residents in each county. (Remember to multiply your proportion by 100). The variable "foreign_born_num" shows the number of foreign-born residents and "pop_20" shows the total population. Which two counties have the highest percentage of foreign-born residents?

```{python}
# Calculate the percentage of foreign-born residents
counties['foreign_born_percentage'] = (counties['foreign_born_num'] / counties['pop_20']) * 100

# Sort counties by the foreign-born percentage in descending order and select the top two
top_two_counties = counties.sort_values(by='foreign_born_percentage', ascending=False).head(2)

# Display the top two counties with the highest percentage of foreign-born residents
top_two_counties[['county', 'foreign_born_percentage']]

```

# Creating Boolean Variable


```{python}
# make a subset of the counties dataframe with the following colmun
changes_df = counties[["county", "pop_change_2010_2020", "pct_emp_change_2010_2021"]]
changes_df
```

## making a column whether there's an increase or decrease from 2010 to 2020 using a boolean variable.

```{python}
changes_df["pop_increase"] = changes_df["pop_change_2010_2020"] > 0
changes_df["emp_increase"] = changes_df["pct_emp_change_2010_2021"] > 0
changes_df
```


```{python}
changes_df.query("pop_increase == True & emp_increase == False")
## beacuse the coulmns are already in boolean,
## the above code can also be written as 
changes_df = changes_df.query("pop_increase & ~(emp_increase)")

```

```{python}
change = counties[["foreign_born_percentage"]]
change
```


```{python}
change["foreign_born_pct_gt_30"] = counties["foreign_born_percentage"] > 30
change
```

```{python}
counties["foreign_born_pct_gt_30"] = counties["foreign_born_percentage"] > 30
counties["foreign_born_pct_gt_30"]

```

```{python}
counties.query("foreign_born_pct_gt_30 == True")
# Query the DataFrame to show only counties where percent_30 is True

```

# Copy on Write Warning

```{python}
pd.options.mode.copy_on_write = False

counties_mini = counties[["county", "area_sq_miles"]]

counties_mini["area_sq_miles"] = counties_mini["area_sq_miles"].round(2)
counties_mini
```

