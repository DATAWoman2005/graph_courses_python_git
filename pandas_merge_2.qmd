

```{python}
import pandas as pd
import country_converter as cc
```
# Load datasets
```{python}
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## one to many joins
```{python}
people
```

```{python}
test_info_many
```


```{python}
pd.merge(people, test_info_many)
```


## Practice Q

```{python}
farm_info
```


```{python}
crop_yields
```
```{python}
pd.merge(farm_info, crop_yields)
```

## multiple key columns 

```{python}
traffic_flow
```

```{python}
pollution_levels
```
```{python}
# Incorrect
pd.merge(traffic_flow, pollution_levels, on = "street_name")
```
```{python}
pd.merge(traffic_flow, pollution_levels, on = ["street_name", "time_of_day"])
```

```{python}
# viewing the dataset
oil_consumption.sort_values(by=["country", "year"])
```
```{python}
# viewing the dataset
tidyr_population.sort_values(by=["country", "year"])
```
```{python}
merged_df = pd.merge(oil_consumption, tidyr_population, on = ["country", "year"])
```

```{python}
merged_df['consumption_per_capita'] = (merged_df['oil_consump'] / merged_df['population']) / 1000

merged_df
```

```{python}
merged_df_1995 = merged_df[merged_df['year'] == 1995]

merged_df_1995.sort_values(by='consumption_per_capita', ascending=False)
```

## key mismatches
```{python}
people
```


```{python}
test_info_diff
```

```{python}
pd.merge(people, test_info_diff)

```

```{python}
test_info_diff["name"] = test_info_diff["name"].str.title()
```
```{python}
test_info_diff['name'].unique()
```


```{python}
test_info_diff["name"] = test_info_diff["name"].str.strip()
```
```{python}
pd.merge(people, test_info_diff)

```


## Practice Q:
```{python}
asia_countries

```

```{python}
asia_population

```
```{python}
asia_population["Country"] = asia_population["Country"].str.title

```

```{python}
pd.merge(asia_countries, asia_population)

```


## Key Mismatches: Oil Consumption Example

```{python}
oil_consumption.sort_values(["country", "year"])
```

```{python}
tidyr_population
```

```{python}
oil_pop = pd.merge(oil_consumption, tidyr_population, how = "left", on = ["country", "year"]).sort_values(["country", "year"])
oil_pop
```

## set arithmetic to identify mismatches
```{python}
oil_countries = set(oil_consumption["country"].unique())
pop_countries = set(tidyr_population["country"].unique())
```

```{python}
# Countries in oil but not in pop
oil_countries - pop_countries
```
```{python}
# Countries in pop but not in oil
pop_countries -oil_countries 
```
## Merging with Country Codes

```{python}
cc.convert("Nigeria", to = "ISO3")
```

```{python}
oil_consumption["country_code"] = cc.convert(oil_consumption["country"], to = "ISO3")

tidyr_population["country_code"] = cc.convert(tidyr_population["country"], to = "ISO3")
```
```{python}
oil_countries = set(oil_consumption["country_code"].unique())
pop_countries = set(tidyr_population["country_code"].unique())
```
```{python}
oil_countries - pop_countries
```

## Practice Q: Merging Oil Consumption with Geographic Data. 
Run the code to view the datasets. 

The first, 'oil_2012', records the oil consumption for the year 2012: 

```{python}
oil_2012
```

And 'country_regions' lists countries along with their respective regions and continents:
```{python}
country_regions
```

Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continennt. 
```{python}
oil_2012["country_code"] = cc.convert(oil_2012["country"], to = "ISO3")
```
```{python}
country_oil_2012 = pd.merge(oil_2012, country_regions, on = "country_code")
country_oil_2012 
```

```{python}
country_oil_2012_sorted = country_oil_2012.sort_values(by = ["continent", "oil_consump"], ascending=[True, False]
)
country_oil_2012_sorted = country_oil_2012.drop_duplicates(subset=['continent'], keep='first')

country_oil_2012_sorted
```