# Imports

```{python}
 import pandas as pd
 import numpy as np
 import vega_datasets as vd
 import plotly as px
```

# Intro to replace()
```{python}
tips = px.data.tips()
tips['day'].value_counts()
```

### recoding the 'day' column to have their full names using the dot method

```{python}
day_mapping = {"Sun" : "Sunday", "Sat" : "Saturday",
 "Thur" : "Thursday", "Fri" : "Friday"}

tips['day_full'] = tips['day'].replace(day_mapping)
tips
```

## Practice Q: 
```{python}
tips = px.data.tips()
tips['sex'].value_counts()
```
```{python}
sex_abbr = {"Female" : "F",
"Male" : "M"}
tips['sex_abbr'] = tips['sex'].replace(sex_abbr)
tips.head()
```
# Handling missing values with replace()


```{python}
movies = vd.data.movies()
movies['Creative_Type'].value_counts(dropna=False)
movies
```


```{python}
# Replacing None values with a string
movies['Creative_Type'] = movies['Creative_Type'].replace({None : "Unknown/Unclear"})
movies['Creative_Type'].value_counts(dropna=False)
```


```{python}
# Replacing NaN values with a number
movies['US_DVD_Sales'].tail(10)
movies['US_DVD_Sales'] = movies['US_DVD_Sales'].replace({np.nan : 0})
```


```{python}
movies['US_DVD_Sales'].tail(10)
```

# Practice Q: Standardize MPAA Ratings

```{python}
movies['MPAA_Rating'].value_counts(dropna=False)
```

```{python}
movies['MPAA_Rating'] = movies['MPAA_Rating'].replace({None : "Unrated", "Not Rated" : "Unrated"})
movies['MPAA_Rating'].value_counts(dropna=False)
```

# Categorizing Numeric Data with Custom Functions


```{python}
def categ_gross(gross):
    if gross < 10000000:
        return "Low"
    elif gross >= 10000000 and gross <= 50000000:
        return "Medium"
    elif gross > 50000000:
        return "High" 
    else:
        return None

categ_gross_vec = np.vectorize(categ_gross)

categ_gross_vec([500, 700])
```


```{python}
movies['gross_category'] = categ_gross_vec(movies['US_Gross'])
movies['gross_category']
```


```{python}
movies
```